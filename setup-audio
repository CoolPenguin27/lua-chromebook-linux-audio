#!/usr/bin/env lua

--# By SuperPenguin34
--# kinda did this as a joke lol
--# important stuff
local utils = require("utils")
--# get utils module aka the functions.py of the script
local board_generations = {}

local SOF_Platforms = {
    glk = "glk",
    cml = "cml",
    jsl = "jsl",
    tgl = "tgl",
    adl = "adl"
}

local AVS_Platforms = {
    skl = "skl", 
    kbl = "kbl"
}

local Bras_Platforms = {
    bdw = "bdw",
    byt = "byt",
    bsw = "bsw"
}

local AMD_Platforms = {
    stoney = 1,
    picasso = 2,
    cezanne = 3,
    mendocino = 4
}
--# all platform dictionaries

local SOF_Card_Folders = {
    apl = {"sof-bxtda7219ma"},
    glk = {"sof-glkda7219ma", "sof-cs42l42", "sof-glkrt5682ma"},
    cml = {"sof-rt5682", "sof-cmlda7219ma", "sof-cml_rt1011_", "sof-cml_max9839"},
    tgl = {"sof-rt5682"},
    jsl = {"sof-rt5682", "sof-da7219max98", "sof-cs42l42"},
    adl = {"sof-rt5682", "sof-nau8825", "sof-ssp_amp"}
}

local AMD_Card_Folders = {
    stoney = {"sof-bxtda7219ma"},
    picasso = {"acp3xalc5682m98", "acp3xalc5682101"},
    cezanne = {"sof-rt5682s-rt1"},
    mendocino = {"sof-rt5682s-hs-"}
}
--# the folder location of the sound cards in the ucm folder

local RPL_TGL_SysLinks = {"cs35l41", "max98357a-rt5682-4ch", "max98357a-rt5682", "max98360a-cs42l42", "max98360a-nau8825", "max98360a-rt5682-2way", "max98360a-rt5682-4ch", "max98360a-rt5682", "max98373-nau8825", "max98390-rt5682", "max98390-ssp2-rt5682-ssp0", "nau8825", "rt1019-nau8825", "rt1019-rt5682", "rt5682", "rt711", "sdw-max98373-rt5682"}

local Current_CLArgs = {}
--# current args for the session
local debian_kernel = "https://tree123.org/chrultrabook/debian-kernel/linux-image-6.5.4-chrultrabook_6.5.4-1_amd64.deb"
local libasound2_url = "https://apt-origin.pop-os.org/release/pool/jammy/libasound2/a04c9a151faa0d94e28e3f7ac411dc8aa083f064/libasound2_1.2.8-1pop1~1669155503~22.04~a04c9a1_amd64.deb"
local libasound2_data_url = "https://apt-origin.pop-os.org/release/pool/jammy/libasound2/a04c9a151faa0d94e28e3f7ac411dc8aa083f064/libasound2-data_1.2.8-1pop1~1669155503~22.04~a04c9a1_all.deb"
--# ubuntu 22.04 stuff 
local apl_dsp = "https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/intel/avs/apl/dsp_basefw.bin"
local skl_dsp = "https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/intel/avs/skl/dsp_basefw.bin"
--# avs stuff
local kernel_version = utils:CleanString(string.lower(utils:RunCommand("uname -r", true)))
--# have easy access to the current running kernel version
-------------------------------------

local function MassCopyDirs(dir, key)
    for index, folder in ipairs(dir[key]) do
        utils:copy_dir("/tmp/chromebook-ucm-conf/"..key.."/"..folder, "/usr/share/alsa/ucm2/conf.d/"..folder)
        --# basically copies a folder in the ucm folder and puts it in the conf.d folder, it loops through a table made for the platform
    end
    
end

local function DownloadUCMRepo()
    utils:print_status("Installing UCM configuration")
    if utils:check_file_exists("/tmp/chromebook-ucm-conf") then
        utils:remove_folder("/tmp/chromebook-ucm-conf")
    end
    --# remove existing ucm folder
    if not utils:RunCommand("git clone https://github.com/WeirdTreeThing/chromebook-ucm-conf /tmp/chromebook-ucm-conf") then
        utils:print_error("Faiiled to download ucm repo")
        os.exit(false)
    end
end

local function SOF_Audio(platform)
    if Current_CLArgs["debug"] ~= nil then
        if Current_CLArgs["debug"] == true then
            utils:print_status("Enabling SOF Debugging")
            utils:copy_file("conf/sof/snd-sof-dbg.conf", "/etc/modprobe.d/snd-sof-dbg.conf")

            else
            utils:print_status("Disabling SOF Debugging")
            utils:remove_folder("/etc/modprobe.d/snd-sof-dbg.conf")

        end

        utils:print_status("Done, please reboot for changes to take effect.")
        os.exit(true)
    end

    utils:print_status("Installing SOF")
    utils:install_package("sof-firmware", "firmware-sof-signed", "alsa-sof-firmware", "sof-firmware", "sof-firmware")
    --# install required packages
    if utils.distro == "ubuntu" then
        --# linux-firmware has different names on ubuntu (and ubuntu based distro's like popOS)
        utils:install_package(nil, "linux-firmware")
    else
        utils:install_package("linux-firmware", "firmware-linux-free firmware-linux-nonfree", "linux-firmware", "kernel-firmware-all", "linux-firmware")
    end

    utils:install_package("alsa-utils", "alsa-utils", "alsa-utils", "alsa-utils", "alsa-utils")

    --# force the SOF Driver
    utils:print_status("Installing modprobe config")
    utils:copy_file("conf/sof/snd-sof.conf", "/etc/modprobe.d/snd-sof.conf")

    DownloadUCMRepo()

    if platform == "adl" then
        --# for some reason rpl devices load the same file as regular adl devices but require a different file name, so we need to create system links
        for index, value in ipairs(RPL_TGL_SysLinks) do
            utils:RunCommand("ln -s /lib/firmware/intel/sof-tplg/sof-adl-"..value..".tplg /lib/firmware/intel/sof-tplg/sof-rpl-"..value..".tplg")
        end
    end

    MassCopyDirs(SOF_Card_Folders, platform)

    if platform == "jsl" then
        --# JSL also needs a tplg build from upstream which have not been shipped in distros yet
        utils:copy_dir("conf/sof/tplg ", "/lib/firmware/intel/sof-tplg")
    end

    --# Common dmic split ucm
    utils:copy_dir("/tmp/chromebook-ucm-conf/dmic-common", "/usr/share/alsa/ucm2/conf.d/dmic-common")

    --# Common hdmi configurations
    utils:copy_dir("/tmp/chromebook-ucm-conf/hdmi-common ", "/usr/share/alsa/ucm2/conf.d/hdmi-common")

    --# time to move back to the main thread
end

local function AVS_Audio(platform)
    if Current_CLArgs["debug"] ~= nil then
        if Current_CLArgs["debug"] == true then
            utils:print_status("Enabling AVS Debugging")
            utils:copy_file("conf/avs/snd-avs-dbg.conf", "/etc/modprobe.d/snd-avs-dbg.conf")

            else
            utils:print_status("Disabling AVS Debugging")
            utils:remove_folder("/etc/modprobe.d/snd-avs-dbg.conf")

        end

        utils:print_status("Done, please reboot for changes to take effect.")
        os.exit(true)
    end

    utils:print_status("Installing AVS")
    local override_avs = false

    if utils:check_file_exists("/sys/bus/acpi/devices/MX98357A:00") then
        --# fun thing, the license states that the software maker is not liable to damages

        if Current_CLArgs["force_avs_install"] then
            utils:print_error("WARNING: Your device has max98357a and can cause permanent damage to your speakers if you set the volume too loud!")
            local result = utils:ask_question('Type "I understand the risk of permanently damaging my speakers!" in all caps to continue:', "I UNDERSTAND THE RISK OF PERMANENTLY DAMAGING MY SPEAKERS!", nil, true)

            override_avs = true

            else
                utils:print_error("WARNING: Your device has max98357a and can cause permanent damage to your speakers if you set the volume too loud! \nAs a safety precaution devices with max98357a have speakers disabled until a fix is in place.\nHeadphones and HDMI audio are safe from this.")
                utils:print_question("If you want to disable this check, restart the script with --force-avs-install")
                local result = utils:ask_question('Type "I Understand my speakers will not work since my device has max98357a!" in all caps to continue:', "I UNDERSTAND MY SPEAKERS WILL NOT WORK SINCE MY DEVICE HAS MAX98357A!", nil, true)


                override_avs = false
            end


    end

    --# boring confusing if statement over now for the real stuff
    DownloadUCMRepo()

    utils:copy_dir("/tmp/chromebook-ucm-conf/avs", "/lib/firmware/intel/avs")

    utils:print_status("Installing topology")
    utils:copy_dir("conf/avs/tplg", "/usr/share/alsa/ucm2/conf.d")
    utils:print_status("Installing modprobe config")
    utils:copy_file("conf/avs/snd-avs.conf", "/etc/modprobe.d/snd-avs.conf")

    if utils:check_file_exists("/usr/bin/wireplumber") then
        --# installs wireplumber config if wireplumber is installed
        utils:print_status("Forcing avs_dmic to use S16LE format")
    
        utils:mk_dir("etc/wireplumber/main.lua.d/")
        --# just to make sure those directories exist
    
        utils:copy_file("conf/avs/51-avs-dmic.lua", "/etc/wireplumber/main.lua.d/51-avs-dmic.lua")
    end

    --# updated avs dsp firmware recently got merged upstream but is not packaged in any distro yet
    utils:print_status("Installing AVS firmware")

    utils:mk_dir("/lib/firmware/intel/avs/skl")
    utils:mk_dir("/lib/firmware/intel/avs/apl")

    utils:download_file(apl_dsp, "/lib/firmware/intel/avs/apl/dsp_basefw.bin")
    utils:download_file(skl_dsp, "/lib/firmware/intel/avs/skl/dsp_basefw.bin")

    --# remove topology file untill working volume limiter or user is willing to take the risk
    if not override_avs then
        utils:remove_folder("/lib/firmware/intel/avs/max98357a-tplg.bin")
    end
    
    if not utils:check_file_exists("/lib/modules/"..kernel_version.."/kernel/sound/soc/intel/avs") then
        --# if avs modules doesnt exist for currently running kernel
        utils:print_error("Looks like your kernel doesn't have the AVS modules. Make sure you are on at least 6.0 with AVS enabled!")
        os.exit(false)
    end

    --# time to move back to the main thread
end

local function AMD_Audio(platform, id)
    --# 1 = stoneyridge (grunt)
    --# 2 = picasso/zen+ (zork)
    --# 3 = cezanne/zen3 (guybrush)
    --# 4 = mendocino/zen2 (skyrim)
    
    if id >= 4 then
       utils:print_status("Installing SOF")
       utils:mk_dir("/lib/firmware/amd/sof/community")
       utils:mk_dir("/lib/firmware/amd/sof-tplg")

       utils:copy_dir("conf/amd-sof/fw", "/lib/firmware/amd/sof/community")
       utils:copy_dir("conf/amd-sof/tplg", "/lib/firmware/amd/sof/sof-tplg")

       --# prepare and copy firmware and topology
    end

    DownloadUCMRepo()

    MassCopyDirs(AMD_Card_Folders, platform)

    --# Common dmic split ucm
    utils:copy_dir("/tmp/chromebook-ucm-conf/dmic-common", "/usr/share/alsa/ucm2/conf.d/dmic-common")

    --# time to move back to the main thread
end

local function Bras_Audio(platform)
    if Current_CLArgs["debug"] ~= nil then
        if Current_CLArgs["debug"] == true then
            utils:print_status("Enabling SOF BSW debugging")
            utils:copy_file("conf/sof/bsw-sof-dbg.conf", "/etc/modprobe.d/bsw-sof-dbg.conf")

            else
            utils:print_status("Disabling SOF BSW debugging")
            utils:remove_folder("/etc/modprobe.d/bsw-sof-dbg.conf")
        end

        utils:print_status("Done, please reboot for changes to take effect.")
        os.exit(true)
    end

    utils:print_status("Fixing braswell/baytrail/broadwell audio")

    utils:install_package("alsa-ucm-conf", "alsa-ucm-conf", "alsa-ucm", "alsa-ucm-conf", "alsa-ucm-conf")
    utils:install_package("sof-firmware", "firmware-sof-signed", "alsa-sof-firmware", "sof-firmware", "sof-firmware")
    
    utils:copy_file("conf/sof/bsw-sof.conf", "/etc/modprobe.d/bsw-sof.conf")
    --# time to move back to the main thread
end

local function APL_Audio(platform)
    utils:print_status("Apollolake has two audio drivers!")
    utils:print_status("SOF: Stable, but doesn't work with headphones.")
    utils:print_status("AVS: Unstable, can damage speakers, but works with all audio hardware.")
    utils:print_error("Speakers are disabled on AVS as a safety precaution. (use --force-avs-install to override) \nSpeakers will still work on SOF Though.")
    local result = utils:ask_question("Which driver would you like to use? [SOF/AVS]", "SOF", "AVS")

    if result == 1 then
        utils:print_status("Using SOF.")
        os.remove("/etc/modprobe.d/snd-avs.conf")
        SOF_Audio("apl")
        utils:copy_file("conf/sof/apl-sof.conf", "/etc/modprobe.d/apl-sof.conf")
    elseif result == 2 then
        utils:print_status("Using AVS.")
        os.remove("/etc/modprobe.d/snd-sof.conf")
        os.remove("/etc/modprobe.d/apl-sof.conf")
        AVS_Audio(platform)
    end

    --# time to move back to the main thread

end

local function PreloadBoardDict()
    --# parsing the json file without any special modules
    for line in io.lines("conf/board-generations.json") do
        if line == "{" or line == "}" then
            --# skip 
            goto continue
        end

        local otherhalf = string.sub(line, (string.find(line, ":") + 1), string.len(line))
        --# get line of value
        line = string.sub(line, 1, (string.find(line, ":") - 1))
        --# get line of key 

        line = utils:CleanString(line)
        otherhalf = utils:CleanString(otherhalf)
    
        board_generations[line] = otherhalf

        ::continue::
    end
end

local function HandleCLArgs()
    for index, args in ipairs(arg) do
        if args == "-b" then
            Current_CLArgs["board_name"] = arg[index + 1]

            elseif args == "--enable-debug" or args == "--disable-debug" then
            Current_CLArgs["debug"] = (args == "--enable-debug") or false

            elseif args == "--force-avs-install" then
            Current_CLArgs["force_avs_install"] = true

            elseif Current_CLArgs["board_name"] == args then
                --# make sure it isnt counted as an argument
            else
            print("Invalid Paramater: "..args)
            print("current paramaters: \n -b new_board_name (force board_name) \n --enable-debug (enable audio debugging) \n --disable-debug (disable audio debugging) \n --force-avs-install (DANGEROUS: Force enable AVS install. MIGHT CAUSE PERMANENT DAMAGE TO SPEAKERS!) ")
            os.exit(false)

        end
    end
end

-------------------------------------
PreloadBoardDict()
HandleCLArgs()

utils:print_warning("NOTE: This version of the script may not get updated frequently. \n If there's any problems, try the original version here: https://github.com/WeirdTreeThing/chromebook-linux-audio")
-------------------------------------
local is_root = utils:RunCommand("echo $EUID", true)
--# for some reason os.getenv doesnt work for this check.
local sys_board = Current_CLArgs["board_name"] or utils:CleanString(string.lower(utils:read_file("/sys/devices/virtual/dmi/id/product_name")))
if sys_board == Current_CLArgs["board_name"] then
    utils:print_warning("Board name overriden to: "..sys_board)
end

if is_root ~= 0 then
    utils:print_error("This script must be ran with Sudo/Root permissions!")
    os.exit(false)
end
--# check over, start actual stuff
--------------------------------------

utils:print_warning("WARNING: This audio script is not fully functional yet!")

local curr_board = board_generations[sys_board]

if curr_board == nil then
    --# doesnt exist
    print("Unknown/Unsupported Platform: "..sys_board)
    os.exit(false)
end
--# if its not there dont bother
if SOF_Platforms[curr_board] then
    SOF_Audio(curr_board)

    elseif AVS_Platforms[curr_board] then
        AVS_Audio(curr_board)

    elseif AMD_Platforms[curr_board] then
        AMD_Audio(curr_board, AMD_Platforms[curr_board])

    elseif Bras_Platforms[curr_board] then
        Bras_Audio(curr_board)

    elseif curr_board == "apl" then    
        APL_Audio(curr_board)     
end


if utils.distro_codename == "bookworm" or utils.version_codename == "bookworm" then
    utils:print_status("Hey! Most devices need a custom kernel for functional audio on Debian and Debian based distros like LMDE.")
    local result = utils:ask_question("Would you like the script to install the kernel for you? [Y/N]", "Y", "N")

    if result == 1 then
        utils:print_status("Starting kernel install")
        utils:print_status("Downloading kernel... (may take a while)")
        utils:download_file(debian_kernel, "/tmp/debian-chrultrabook-kernel.deb")
        utils:print_status("Installing kernel... (may take a while)")
        utils:install_package(nil, "/tmp/debian-chrultrabook-kernel.deb")
    elseif result == 2 then
        utils:print_status("Skipping kernel installation")
    end

    elseif utils.distro_codename == "jammy" or utils.version_codename == "jammy" then
        --# install more up to date Pop!_OS packages if on Ubuntu 22.04 (or on linux mint)

        utils:print_status("Updating libasound2 (might take a while)")
    
        --# might need curl
        utils:download_file(libasound2_url, "/tmp/libasound2.deb")
        utils:download_file(libasound2_data_url, "/tmp/libasound2_data.deb")
        utils:install_package(nil, "/tmp/libasound2*.deb")
    
        if string.find(string.sub(kernel_version, 1, 2), "5.") then
            --# if on a 5.X kernel then update
            utils:print_status("Updating linux kernel (might take a while)")
            utils:download_file(debian_kernel, "/tmp/debian-chrultrabook-kernel.deb")
            utils:print_status("Installing kernel... (may take a while)")
            utils:install_package(nil, "/tmp/debian-chrultrabook-kernel.deb")
        end
end



if utils:check_file_exists("/usr/bin/wireplumber") then
    --# installs wireplumber config to increase headroom
    --# fixes instanbility and crashes of multiple devices
    utils:print_status("Increasing alsa headroom (fixes instability)")

    utils:mk_dir("/etc/wireplumber/main.lua.d/")
    --# just to make sure those directories exist

    utils:copy_file("conf/common/51-increase-headroom.lua", "/etc/wireplumber/main.lua.d/51-increase-headroom.lua")
end

utils:print_header("Audio installed successfully! Reboot to finish setup.")
os.exit(true)